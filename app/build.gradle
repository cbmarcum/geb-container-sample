
plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal() // for geb snapshot
}

// we're using a separate source set for browser container tests
// but it's not required. You could just use test.
sourceSets {
    integrationTest {
        groovy {
            srcDirs = ['src/integration-test/groovy']
        }
        resources {
            srcDirs = ['src/integration-test/resources']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}


// uses gradle/libs.versions.toml
dependencies {
    implementation libs.groovy

    // This dependency is used by the application.
    // implementation libs.guava

    testImplementation libs.spock.core
    testImplementation libs.junit
    testImplementation libs.geb.spock8
    // testImplementation "org.apache.groovy.geb:geb-spock:8.0.1-SNAPSHOT"


    integrationTestImplementation libs.geb.container

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'
    // Need a driver implementation
    testRuntimeOnly libs.selenium.firefox.driver
    testRuntimeOnly libs.selenium.chrome.driver
    testRuntimeOnly libs.selenium.edge.driver

    integrationTestImplementation 'org.testcontainers:spock:1.21.3'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'net.codebuilders.App'
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test

    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    systemProperty('geb.env', System.getProperty('geb.env')?: 'firefox')
    systemProperty('grails.geb.recording.mode', 'RECORD_ALL') // also RECORD_FAILING
}

check.dependsOn integrationTest

tasks.withType(Test).configureEach {
    outputs.upToDateWhen { false } // always run tests
    useJUnitPlatform()
}

tasks.named("test").configure {
    systemProperty('geb.env', System.getProperty('geb.env')?: 'firefox')
}
